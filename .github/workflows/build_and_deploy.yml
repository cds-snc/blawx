name: Build and Deploy Blawx to Staging

on:
  push:
    branches:
      - main
    paths-ignore:
      - "terragrunt/**"
      - ".github/workflows/tf_*.yml"
      - "*.md"

env:
  AWS_REGION: ca-central-1
  REGISTRY: ${{ vars.STAGING_AWS_ACCOUNT_ID }}.dkr.ecr.ca-central-1.amazonaws.com/blawx-staging
  ECS_CLUSTER: blawx-staging-cluster
  ECS_SERVICE: blawx-staging-service
  IMAGE_TAG_LATEST: latest

permissions:
  id-token: write
  contents: read
  pull-requests: write
  actions: write
  checks: write
  statuses: write
  security-events: write

jobs:
  build-and-deploy:
    runs-on: ubuntu-24.04-arm64
    steps:
      - name: Audit DNS requests
        uses: cds-snc/dns-proxy-action@50d3033adea55c246f2e314920759cd81ecae522
        env:
          DNS_PROXY_FORWARDTOSENTINEL: "true"
          DNS_PROXY_LOGANALYTICSWORKSPACEID: ${{ secrets.LOG_ANALYTICS_WORKSPACE_ID }}
          DNS_PROXY_LOGANALYTICSSHAREDKEY: ${{ secrets.LOG_ANALYTICS_WORKSPACE_KEY }}

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::${{ vars.STAGING_AWS_ACCOUNT_ID }}:role/blawx-apply
          role-session-name: BlawxECRPush
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Build and tag Docker image
        run: |
          # Build the Docker image for AMD64 (GitHub Actions runners)
          docker build \
            -t $REGISTRY:${{ env.IMAGE_TAG_LATEST }} \
            --platform linux/amd64 \
            -f Dockerfile.production \
            .

      - name: Push Container to Amazon ECR
        run: |
          # Push latest version
          docker push $REGISTRY:${{ env.IMAGE_TAG_LATEST }}

      - name: Update ECS service with new image
        run: |
          # Force a new deployment of the ECS service to pick up the new image
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

          echo "ECS service update initiated. New deployment will pull the latest image."

      - name: Wait for deployment to stabilize
        run: |
          echo "Waiting for ECS service to stabilize after deployment..."
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }}

          echo "ECS service has stabilized successfully!"

      - name: Get service status
        run: |
          # Get the current service status and task definition
          SERVICE_INFO=$(aws ecs describe-services \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }} \
            --region ${{ env.AWS_REGION }})

          RUNNING_COUNT=$(echo $SERVICE_INFO | jq -r '.services[0].runningCount')
          DESIRED_COUNT=$(echo $SERVICE_INFO | jq -r '.services[0].desiredCount')

          echo "Service Status:"
          echo "  Running Tasks: $RUNNING_COUNT"
          echo "  Desired Tasks: $DESIRED_COUNT"

          # Check if deployment was successful
          if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ] && [ "$RUNNING_COUNT" -gt "0" ]; then
            echo "‚úÖ Deployment successful! Service is running with $RUNNING_COUNT tasks."
          else
            echo "‚ùå Deployment may have issues. Running: $RUNNING_COUNT, Desired: $DESIRED_COUNT"
            exit 1
          fi

      - name: Generate Security SBOM
        uses: cds-snc/security-tools/.github/actions/generate-sbom@eecd7a02a0294b379411c126b61e5c29e253676a # v2.1.4
        with:
          docker_image: "${{ env.REGISTRY }}:latest"
          dockerfile_path: "Dockerfile.production"
          platform: "linux/arm64"
          sbom_name: "blawx"
          token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}

      - name: Report deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Blawx application deployed successfully to staging!"
            echo "üåê Application URL: https://blawx.cdssandbox.xyz"
          else
            echo "üí• Deployment failed. Check the logs above for details."
          fi
