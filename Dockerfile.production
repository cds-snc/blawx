# Production Dockerfile for Blawx Django Application - ARM64 optimized
FROM --platform=linux/arm64 swipl:latest as prolog

# Multi-stage build for production Django application
FROM --platform=linux/arm64 python:3.11-slim as base

# Set environment variables for production
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    DEBIAN_FRONTEND=noninteractive

# Install system dependencies for ARM64
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    libpq-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    libjpeg-dev \
    libpng-dev \
    libreadline-dev \
    libedit-dev \
    libgmp-dev \
    libssl-dev \
    libarchive-dev \
    libarchive13 \
    libtcmalloc-minimal4 \
    libpcre2-dev \
    git \
    wget \
    unzip \
    make \
    g++ \
    gcc \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for ARM64
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs \
    && rm -rf /var/lib/apt/lists/*

# Create app user for security
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy and install Python requirements first for better caching
COPY blawx/requirements.txt /app/requirements.txt
RUN pip install --no-cache-dir -r requirements.txt

# Copy SWI-Prolog from base image
COPY --from=prolog /usr/lib/swipl/ /usr/lib/swipl/
COPY --from=prolog /usr/bin/swipl /usr/bin/swipl
RUN chmod +x /usr/bin/swipl

# Create static directories
RUN mkdir -p /app/blawx/static/blawx/blockly \
    && mkdir -p /app/blawx/static/blawx/fonts

# Install and setup frontend dependencies
RUN npm install --production blockly jquery bootstrap bootstrap-icons

# Copy frontend assets to static directory
RUN cp -r node_modules/blockly/* /app/blawx/static/blawx/blockly/ \
    && cp node_modules/jquery/dist/jquery.min.js /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap/dist/css/bootstrap.min.css /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap/dist/css/bootstrap.min.css.map /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap/dist/js/bootstrap.bundle.min.js /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap/dist/js/bootstrap.bundle.min.js.map /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap-icons/font/bootstrap-icons.css /app/blawx/static/blawx/ \
    && cp node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff /app/blawx/static/blawx/fonts/ \
    && cp node_modules/bootstrap-icons/font/fonts/bootstrap-icons.woff2 /app/blawx/static/blawx/fonts/

# Clean up npm packages to reduce image size
RUN rm -rf node_modules

# Production stage
FROM --platform=linux/arm64 python:3.11-slim as production

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    DJANGO_SETTINGS_MODULE=blawx.settings_production \
    ENVIRONMENT=production

# Install only runtime dependencies for ARM64
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    libxml2 \
    libxslt1.1 \
    zlib1g \
    libjpeg62-turbo \
    libpng16-16 \
    libreadline8 \
    libedit2 \
    libgmp10 \
    libssl3 \
    libarchive13 \
    libtcmalloc-minimal4 \
    libpcre2-8-0 \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Set work directory
WORKDIR /app

# Copy Python dependencies from base stage
COPY --from=base /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=base /usr/local/bin /usr/local/bin

# Copy SWI-Prolog installation
COPY --from=base /usr/lib/swipl/ /usr/lib/swipl/
COPY --from=base /usr/bin/swipl /usr/bin/swipl

# Copy static files
COPY --from=base /app/blawx/static /app/blawx/static

# Copy application code
COPY blawx/ /app/blawx/
COPY manage.py /app/
COPY load_data.py /app/
COPY init_db.py /app/
COPY docker-entrypoint.sh /app/

# Create directories and set permissions
RUN mkdir -p /app/staticfiles && \
    chmod +x /app/docker-entrypoint.sh

# For local development/testing - create initial SQLite setup
# Production will use PostgreSQL and skip these steps
ENV DJANGO_SETTINGS_MODULE=blawx.settings_production
WORKDIR /app

# Note: The entrypoint will handle migrations for the actual database (PostgreSQL in production)
# These steps are just for container build validation
RUN python manage.py makemigrations || true
RUN python manage.py collectstatic --noinput || true

# Set ownership to app user
RUN chown -R appuser:appuser /app

# Switch to non-root user for security
USER appuser

# Expose port 8000
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD python manage.py check --deploy || exit 1

# Set entrypoint and command
ENTRYPOINT ["/app/docker-entrypoint.sh"]
CMD ["gunicorn", "--bind", "0.0.0.0:8000", "--workers", "2", "--worker-class", "sync", "--timeout", "120", "blawx.wsgi:application"]